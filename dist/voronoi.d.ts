import CircleEvent from './circleevent';
import Beachsection from './beachsection';
import Diagram from './diagram';
import Edge from './edge';
import HalfEdge from './halfedge';
import RBTree from './rbtree';
import { Site, Sites } from './sites';
import Vertex from './vertex';
export default class Voronoi {
    vertices: any;
    edges: any;
    cells: any;
    toRecycle: any;
    beachsectionJunkyard: any[];
    circleEventJunkyard: CircleEvent[];
    vertexJunkyard: any[];
    edgeJunkyard: any[];
    cellJunkyard: any[];
    beachline: RBTree | null;
    circleEvents: RBTree | null;
    firstCircleEvent: CircleEvent | null;
    constructor();
    reset(): void;
    sqrt: (x: number) => number;
    abs: (x: number) => number;
    ε: number;
    static ε: number;
    static invε: number;
    invε: number;
    equalWithEpsilon(a: number, b: number): boolean;
    greaterThanWithEpsilon: (a: number, b: number) => boolean;
    greaterThanOrEqualWithEpsilon: (a: number, b: number) => boolean;
    lessThanWithEpsilon: (a: number, b: number) => boolean;
    lessThanOrEqualWithEpsilon: (a: number, b: number) => boolean;
    createCell(site: Site): any;
    createHalfedge(edge: Edge, lSite: any, rSite: any): HalfEdge;
    createVertex(x: number, y: number): any;
    createEdge(lSite: any, rSite: any, va?: any, vb?: any): any;
    createBorderEdge(lSite: any, va: any, vb: any): any;
    setEdgeStartpoint(edge?: Edge, lSite?: any, rSite?: any, vertex?: Vertex): void;
    setEdgeEndpoint(edge: Edge, lSite: any, rSite: any, vertex: Vertex): void;
    createBeachsection(site: any): any;
    leftBreakPoint(arc: any, directrix: any): any;
    rightBreakPoint(arc: any, directrix: any): any;
    detachBeachsection(beachsection: Beachsection): void;
    removeBeachsection(beachsection: Beachsection): void;
    addBeachsection(site: any): void;
    attachCircleEvent(arc: any): void;
    detachCircleEvent(arc: any): void;
    connectEdge(edge: Edge, bbox: any): boolean;
    clipEdge(edge: Edge, bbox: any): boolean;
    clipEdges(bbox: any): void;
    closeCells(bbox: any): void;
    quantizeSites(sites: Sites): void;
    recycle(diagram: Diagram): void;
    compute(sites: Sites, bbox: any): Diagram;
}
